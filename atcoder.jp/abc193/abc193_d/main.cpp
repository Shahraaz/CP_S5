#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/debug.h"
#else
#define db(...)
#endif

#define all(v) v.begin(), v.end()
#define pb push_back
using ll = long long;
const int NAX = 2e5 + 5, MOD = 1000000007;

double solveCase(int64_t K, string S, string T)
{
    // TODO: edit here
    double ret = 0;
    vector<int> cntS(10), cntT(10);
    for (size_t i = 0; i + 1 < S.size(); i++)
        cntS[S[i] - '0']++;
    for (size_t i = 0; i + 1 < T.size(); i++)
        cntT[T[i] - '0']++;
    vector<ll> pow10(12);
    pow10[0] = 1;
    for (size_t i = 1; i < 12; i++)
        pow10[i] = 10 * pow10[i - 1];
    auto win = [&]() -> double {
        double res = 0;
        ll a = 0, b = 0;
        for (size_t i = 1; i < 10; i++)
            a += i * pow10[cntS[i]];
        for (size_t i = 1; i < 10; i++)
            b += i * pow10[cntT[i]];
        db(cntS, cntT, a, b);
        return a > b;
    };
    for (size_t i = 1; i < 10; i++)
    {
        if (cntS[i] + cntT[i] == K)
            continue;
        double probi = (K - cntS[i] - cntT[i]) / (9.0 * K - 2 * (S.size() - 1));
        cntS[i]++;
        for (size_t j = 1; j < 10; j++)
        {
            if (cntS[j] + cntT[j] == K)
                continue;
            double probj = (K - cntS[j] - cntT[j]) / (9.0 * K - 2 * (S.size() - 1) - 1);
            cntT[j]++;
            db(i, j, probi, probj);
            if (win())
                ret += probi * probj;
            cntT[j]--;
        }
        cntS[i]--;
    }
    return ret;
}

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main()
{
#ifndef LOCAL
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif
    constexpr char endl = '\n';
    int64_t K;
    string S, T;
    cin >> K >> S >> T;
    auto ans = solveCase(K, S, T);
    cout << fixed << setprecision(10);
    cout << ans << endl;
    return 0;
}