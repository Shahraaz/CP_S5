#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/debug.h"
#else
#define db(...)
#endif

#define all(v) v.begin(), v.end()
#define pb push_back
using ll = long long;
// const int NAX = 2e5 + 5, MOD = 1000000007;

constexpr int64_t MOD = 998244353;

const int kmod = MOD;

int mul(int a, int b, int mod = kmod)
{
    return (long long)a * b % mod;
}

int add(int a, int b, int mod = kmod)
{
    a += b;
    if (a >= mod)
        a -= mod;
    return a;
}

int sub(int a, int b, int mod = kmod)
{
    a -= b;
    if (a < 0)
        a += mod;
    return a;
}

int power(int base, int index, int mod = kmod)
{
    if (index == 0)
        return 1;
    int temp = power(base, index / 2, mod);
    temp = mul(temp, temp, mod);
    if (index & 1)
        temp = mul(temp, base, mod);
    return temp;
}

int mod_inv(int x, int mod = kmod)
{
    return power(x, mod - 2, mod);
}

// const int _n = 2e5 + 10;
// vector<int> Fact(_n), Inv(_n);

// void pre()
// {
//     Fact[0] = 1;
//     for (int i = 1; i < _n; ++i)
//         Fact[i] = mul(Fact[i - 1], i);
//     Inv[_n - 1] = mod_inv(Fact[_n - 1]);
//     for (int i = _n - 2; i >= 0; --i)
//         Inv[i] = mul(Inv[i + 1], (1 + i));
// }

// int ncr(int n, int r)
// {
//     if (n < 0 || r < 0 || n - r < 0)
//         return 0;
//     return mul(Fact[n], mul(Inv[r], Inv[n - r]));
// }

// int npr(int n, int r)
// {
//     if (n < 0 || r < 0 || n - r < 0)
//         return 0;
//     return mul(Fact[n], Inv[n - r]);
// }

// #define int64_t int

vector<int64_t> mul(vector<int64_t> &a, const vector<int64_t> &b)
{
    assert(a.size() == b.size());
    int n = a.size();
    vector<int64_t> ret(n);
    for (size_t i = 1; i < n; i++)
        for (size_t j = i; j < n; j += i)
            ret[j] = add(ret[j], mul(a[i], b[j / i]));
    db(a);
    db(b);
    db(ret);
    return ret;
}

vector<int64_t> expo(int64_t N, int64_t idx)
{
    db(N, idx);
    vector<int64_t> ret(N + 1);
    if (idx == 0)
        return ret;
    if (idx == 1)
    {
        ret = vector<int64_t>(N + 1, 1);
        ret[0] = 0;
        return ret;
    }
    ret = expo(N, idx / 2);
    ret = mul(ret, ret);
    if (idx & 1)
        ret = mul(ret, vector<int64_t>(N + 1, 1));
    db(N, idx, ret);
    return ret;
}

int64_t solveCase(int64_t N, int64_t M)
{
    // TODO: edit here
    db(N, M);
    auto res = expo(M, N);
    int64_t ret = 0;
    db(ret, res);
    for (auto &x : res)
        ret = add(ret, x);
    return ret;
}

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main()
{
#ifndef LOCAL
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif
    constexpr char endl = '\n';
    int64_t N, M;
    cin >> N >> M;
    auto ans = solveCase(N, M);
    cout << ans << endl;
    return 0;
}