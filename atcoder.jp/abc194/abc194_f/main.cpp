#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/debug.h"
#else
#define db(...)
#endif

#define all(v) v.begin(), v.end()
#define pb push_back
using ll = long long;
const int NAX = 2e5 + 5;

// const int _n = 2e5 + 10;
// vector<int> Fact(_n), Inv(_n);
const int kmod = 1000000007;

int mul(int a, int b, int mod = kmod)
{
    return (long long)a * b % mod;
}

int add(int a, int b, int mod = kmod)
{
    a += b;
    if (a >= mod)
        a -= mod;
    return a;
}

int sub(int a, int b, int mod = kmod)
{
    a -= b;
    if (a < 0)
        a += mod;
    return a;
}

int power(int base, int index, int mod = kmod)
{
    if (index == 0)
        return 1;
    int temp = power(base, index / 2, mod);
    temp = mul(temp, temp, mod);
    if (index & 1)
        temp = mul(temp, base, mod);
    return temp;
}

int mod_inv(int x, int mod = kmod)
{
    return power(x, mod - 2, mod);
}

// void pre()
// {
//     Fact[0] = 1;
//     for (int i = 1; i < _n; ++i)
//         Fact[i] = mul(Fact[i - 1], i);
//     Inv[_n - 1] = mod_inv(Fact[_n - 1]);
//     for (int i = _n - 2; i >= 0; --i)
//         Inv[i] = mul(Inv[i + 1], (1 + i));
// }

// int ncr(int n, int r)
// {
//     if (n < 0 || r < 0 || n - r < 0)
//         return 0;
//     return mul(Fact[n], mul(Inv[r], Inv[n - r]));
// }

// int npr(int n, int r)
// {
//     if (n < 0 || r < 0 || n - r < 0)
//         return 0;
//     return mul(Fact[n], Inv[n - r]);
// }

constexpr int64_t MOD = 1000000007;
int64_t solveCase(string N, int64_t K)
{
    // TODO: edit here
    // pre();
    db(N, K);
    int res = 0;
    int mask = 0;
    vector<char> digs;
    vector<int> dp(17);
    for (size_t i = 0; i < N.size(); i++)
    {
        int c = N[i] - '0';
        if ('A' <= N[i] && N[i] <= 'F')
            c = N[i] - 'A' + 10;
        vector<int> dp_next(17);
        for (int j = 0; j < 17; j++)
        {
            dp_next[j] = add(dp_next[j], mul(j, dp[j]));
            if (j + 1 < 17)
                dp_next[j + 1] = add(dp_next[j + 1], mul(16 - j, dp[j]));
        }
        for (size_t e = 0; e < c; e++)
        {
            if (i == 0 and e == 0)
                continue;
            dp_next[__builtin_popcount(mask | (1 << e))] = add(dp_next[__builtin_popcount(mask | (1 << e))], 1);
        }
        if (i != 0)
            dp_next[1] = add(dp_next[1], 15);

        mask = mask | (1 << c);
        dp = dp_next;
    }
    dp[__builtin_popcount(mask)] = add(dp[__builtin_popcount(mask)], 1);
    return dp[K];
}

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main()
{
#ifndef LOCAL
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif
    constexpr char endl = '\n';
    string N;
    int64_t K;
    cin >> N >> K;
    auto ans = solveCase(N, K);
    cout << ans << endl;
    return 0;
}