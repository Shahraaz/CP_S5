#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/debug.h"
#else
#define db(...)
#endif

#define all(v) v.begin(), v.end()
#define pb push_back
using ll = long long;
const int NAX = 2e5 + 5, MOD = 1000000007;

string solveCase(int n, const vector<string> &a)
{
    // TODO: edit here
    vector<int> exist(26);
    vector<char> ss;
    for (auto &x : a)
        for (auto &y : x)
        {
            exist[y - 'a'] = 1;
            ss.pb(y);
        }
    int cnt = count(all(exist), 1);

    sort(all(ss));
    ss.erase(unique(all(ss)), ss.end());

    vector<char> perms;
    for (size_t i = 0; i < 10; i++)
        perms.pb('0' + i);

    if (cnt > 10 || ss.size() > 10)
        return "UNSOLVABLE";

    cnt = 0;
    do
    {
        map<char, char> mp;
        for (size_t i = 0; i < ss.size(); i++)
            mp[ss[i]] = perms[i];
        auto b = a;
        db(mp);
        auto check = [&]() -> bool {
            for (auto &x : b)
                for (auto &y : x)
                    y = mp[y];
            vector<long long> nums(3);
            for (size_t i = 0; i < b.size(); i++)
            {
                for (auto &x : b[i])
                {
                    if ('0' <= x && x <= '9')
                        nums[i] = nums[i] * 10 + x - '0';
                    else
                        return false;
                }
                if (b[i][0] == '0')
                    return false;
            }
            return nums[0] && nums[1] && nums[2] && nums[0] + nums[1] == nums[2];
        };
        if (check())
        {
            string ret;
            for (auto &x : b)
            {
                for (auto &y : x)
                {
                    ret += y;
                }
                ret += "\n";
            }
            ret.pop_back();
            return ret;
        }
    } while (next_permutation(all(perms)));
    return "UNSOLVABLE";
}

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main()
{
#ifndef LOCAL
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif
    constexpr char endl = '\n';
    // failed to analyze input format
    // TODO: edit here
    int n = 3;
    // cin >> n;
    vector<string> a(n);
    for (int i = 0; i < n; ++i)
    {
        cin >> a[i];
    }
    auto ans = solveCase(n, a);
    // failed to analyze output format
    // TODO: edit here
    cout << ans << endl;
    return 0;
}