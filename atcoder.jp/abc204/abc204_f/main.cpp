#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/debug.h"
#else
#define db(...)
#endif

#define all(v) v.begin(), v.end()
#define pb push_back
using ll = long long;
const int NAX = 2e5 + 5, MOD = 998244353;

// constexpr int64_t MOD = 998244353;
const int kmod = 998244353;

int mul(int a, int b, int mod = kmod)
{
    return (long long)a * b % mod;
}

int add(int a, int b, int mod = kmod)
{
    a += b;
    if (a >= mod)
        a -= mod;
    return a;
}

int sub(int a, int b, int mod = kmod)
{
    a -= b;
    if (a < 0)
        a += mod;
    return a;
}

int power(int base, int index, int mod = kmod)
{
    if (index == 0)
        return 1;
    int temp = power(base, index / 2, mod);
    temp = mul(temp, temp, mod);
    if (index & 1)
        temp = mul(temp, base, mod);
    return temp;
}

int mod_inv(int x, int mod = kmod)
{
    return power(x, mod - 2, mod);
}

const int _n = 2e5 + 10;
vector<int> Fact(_n), Inv(_n);

void pre()
{
    Fact[0] = 1;
    for (int i = 1; i < _n; ++i)
        Fact[i] = mul(Fact[i - 1], i);
    Inv[_n - 1] = mod_inv(Fact[_n - 1]);
    for (int i = _n - 2; i >= 0; --i)
        Inv[i] = mul(Inv[i + 1], (1 + i));
}

int ncr(int n, int r)
{
    if (n < 0 || r < 0 || n - r < 0)
        return 0;
    return mul(Fact[n], mul(Inv[r], Inv[n - r]));
}

int npr(int n, int r)
{
    if (n < 0 || r < 0 || n - r < 0)
        return 0;
    return mul(Fact[n], Inv[n - r]);
}

struct matrix
{
    vector<vector<long long>> MAT;
    matrix() {}
    matrix(long long n, long long m)
    {
        MAT.resize(n, vector<long long>(m));
    }
};

matrix mul(const matrix &A, const matrix &B)
{
    int n = A.MAT.size(), m = B.MAT.size(), k = B.MAT[0].size();
    matrix X(n, k);
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < k; ++j)
        {
            X.MAT[i][j] = 0;
            for (int k = 0; k < m; ++k)
                X.MAT[i][j] = add(X.MAT[i][j], mul(A.MAT[i][k], B.MAT[k][j]));
        }
    return X;
}

matrix unit(int n)
{
    matrix X(n, n);
    for (int i = 0; i < n; ++i)
        X.MAT[i][i] = 1;
    return X;
}

matrix power(const matrix &A, long long index)
{
    matrix temp;
    if (index == 0)
        return unit(A.MAT.size());
    temp = power(A, index / 2);
    temp = mul(temp, temp);
    if (index & 1)
        return mul(temp, A);
    return temp;
}

int64_t solveCase(int64_t H, int64_t W)
{
    // TODO: edit here
    const int ALL = 1 << H;
    vector<vector<int>> ways;
    ways = vector<vector<int>>(ALL, vector<int>(ALL));
    for (int mask = 0; mask < ALL; mask++)
    {
        function<void(int, int)> brute = [&](int pos, int next_mask) -> void
        {
            if (pos == H)
            {
                ways[mask][next_mask]++;
                if (ways[mask][next_mask] >= MOD)
                    ways[mask][next_mask] -= MOD;
                return;
            }
            if ((mask >> pos) & 1)
            {
                brute(pos + 1, next_mask);
                return;
            }
            // keep square
            brute(pos + 1, next_mask);
            // keep hor rect
            brute(pos + 1, next_mask | (1 << pos));
            // keep ver rect
            if (pos + 1 < H && (mask >> (pos + 1) & 1) == 0)
                brute(pos + 2, next_mask);
        };
        brute(0, 0);
        db(mask, ways[mask]);
    }
    matrix base(ALL, ALL);
    for (size_t i = 0; i < ALL; i++)
        for (size_t j = 0; j < ALL; j++)
            base.MAT[i][j] = ways[i][j];
    auto res = power(base, W);
    for (int mask = 0; mask < ALL; mask++)
    {
        db(mask, res.MAT[mask]);
    }
    return res.MAT[0][0];
}

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main()
{
#ifndef LOCAL
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif
    constexpr char endl = '\n';
    int64_t H, W;
    cin >> H >> W;
    auto ans = solveCase(H, W);
    cout << ans << endl;
    return 0;
}