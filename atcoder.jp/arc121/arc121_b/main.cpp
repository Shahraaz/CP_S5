#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/debug.h"
#else
#define db(...)
#endif

#define all(v) v.begin(), v.end()
#define pb push_back
using ll = long long;
const int NAX = 2e5 + 5, MOD = 1000000007;

int64_t solveCase(int N, const vector<int64_t> &a, const vector<char> &c)
{
    // TODO: edit here
    db(a);
    db(c);
    map<char, vector<int>> mp;
    for (size_t i = 0; i < 2 * N; i++)
        mp[c[i]].pb(a[i]);
    int cnt = 0;
    vector<char> oddwale;
    for (auto &x : mp)
    {
        db(x);
        cnt += x.second.size() & 1;
        if (x.second.size() & 1)
            oddwale.pb(x.first);
        sort(all(x.second));
    }
    db(cnt);
    if (cnt == 0)
        return 0;
    assert(cnt == 2);
    char R = oddwale[0];
    char G = oddwale[1];
    char B = 'R' ^ 'G' ^ 'B' ^ R ^ B;
    int64_t res = LLONG_MAX;
    for (auto &x : mp[R])
    {
        auto it = lower_bound(all(mp[G]), x);
        if (it != mp[G].end())
            res = min(res, (int64_t)abs(x - *it));
        if (it != mp[G].begin())
            res = min(res, (int64_t)abs(x - *(--it)));
    }
    if (mp[B].size())
    {
        set<pair<int, int>> bestR;
        for (auto &x : mp[R])
        {
            {
                auto it = lower_bound(all(mp[B]), x);
                if (it != mp[B].end())
                    bestR.insert({abs(x - *it), it - mp[B].begin()});
                if (it != mp[B].begin())
                {
                    --it;
                    bestR.insert({abs(x - *it), it - mp[B].begin()});
                    ++it;
                }
                if (next(it) != mp[B].end())
                {
                    ++it;
                    bestR.insert({abs(x - *it), it - mp[B].begin()});
                    --it;
                }
            }
        }

        for (auto &x : mp[G])
        {
            auto it = lower_bound(all(mp[B]), x);
            if (it != mp[B].end())
            {
                int idx = it - mp[B].begin();
                int cnt = 0;
                for (auto &y : bestR)
                {
                    if (y.second == idx)
                        continue;
                    cnt++;
                    res = min(res, (int64_t)abs(x - *it) + y.first);
                    if (cnt == 10)
                        break;
                }
            }
            if (it != mp[B].begin())
            {
                --it;
                int idx = it - mp[B].begin();
                int cnt = 0;
                for (auto &y : bestR)
                {
                    if (y.second == idx)
                        continue;
                    cnt++;
                    res = min(res, (int64_t)abs(x - *it) + y.first);
                    if (cnt == 10)
                        break;
                }
                ++it;
            }
            if (next(it) != mp[B].end())
            {
                ++it;
                int idx = it - mp[B].begin();
                int cnt = 0;
                for (auto &y : bestR)
                {
                    if (y.second == idx)
                        continue;
                    cnt++;
                    res = min(res, (int64_t)abs(x - *it) + y.first);
                    if (cnt == 10)
                        break;
                }
                --it;
            }
        }
    }
    return res;
}

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main()
{
#ifndef LOCAL
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif
    constexpr char endl = '\n';
    int N;
    cin >> N;
    vector<int64_t> a(2 * N);
    vector<char> c(2 * N);
    for (int i = 0; i < 2 * N; ++i)
    {
        cin >> a[i] >> c[i];
    }
    auto ans = solveCase(N, a, c);
    cout << ans << endl;
    return 0;
}