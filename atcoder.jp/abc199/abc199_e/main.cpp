#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/debug.h"
#else
#define db(...)
#endif

#define all(v) v.begin(), v.end()
#define pb push_back
using ll = long long;
const int NAX = 20 + 1, MOD = 1000000007;

ll dp[1 << NAX];

int64_t solveCase(int N, int M, const vector<int> &X, const vector<int> &Y, const vector<int> &Z)
{
    memset(dp, -1, sizeof dp);
    vector<vector<pair<int, int>>> conditions(N + 1);
    db(N, M);
    db(X);
    db(Y);
    db(Z);
    for (size_t i = 0; i < M; i++)
        conditions[X[i]].pb({Y[i], Z[i]});
    vector<int> cnt_mask(NAX);
    for (size_t i = 0; i <= N; i++)
    {
        if (i > 0)
            cnt_mask[i] = cnt_mask[i - 1] << 1;
        cnt_mask[i] |= 1;
        db(i, conditions[i]);
        // db(i, bitset<NAX>(cnt_mask[i]));
    }

    function<ll(int)> dfs = [&](int mask) -> ll {
        auto &ret = dp[mask];
        if (ret != -1)
            return ret;
        int cnt = __builtin_popcount(mask);
        bool ok = true;
        ret = 0;
        for (auto &c : conditions[cnt])
        {
            int nmask = mask & cnt_mask[c.first - 1];
            if (__builtin_popcount(nmask) > c.second)
                ok = false;
        }
        if (!ok)
            ret = 0;
        else if (cnt >= N)
            ret = 1;
        else
        {
            for (size_t i = 0; i < N; i++)
                if (mask & (1 << i))
                    ;
                else
                    ret += dfs(mask | (1 << i));
        }
        db(bitset<NAX>(mask), cnt, ret);
        return ret;
    };
    return dfs(0);
}

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main()
{
#ifndef LOCAL
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif
    constexpr char endl = '\n';
    int N, M;
    cin >> N >> M;
    vector<int> X(M), Y(M), Z(M);
    for (int i = 0; i < M; ++i)
    {
        cin >> X[i] >> Y[i] >> Z[i];
    }
    auto ans = solveCase(N, M, X, Y, Z);
    cout << ans << endl;
    return 0;
}