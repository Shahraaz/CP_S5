#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL
#include "/debug.h"
#else
#define db(...)
#endif

#define all(v) v.begin(), v.end()
#define pb push_back
using ll = long long;
const int NAX = 2e5 + 5, MOD = 1000000007;

int64_t solveCase(int N, int M, const vector<int> &A, const vector<int> &B)
{
    vector<vector<int>> adj(N);
    db("a");
    for (size_t i = 0; i < M; i++)
    {
        adj[A[i] - 1].pb(B[i] - 1);
        adj[B[i] - 1].pb(A[i] - 1);
    }
    db("b");
    vector<int> vis(N), clr(N, -1), lvl(N);
    int timer = 1;
    function<ll(int, int, int)> dfs = [&](int node, int par, int c) -> ll {
        ll ret = 1;
        vis[node] = 1;
        // db(node, par, c, lvl[node]);

        for (auto &x : adj[node])
        {
            if (x == par)
                continue;
            if (lvl[x] == 0)
            {
                ll temp = 0;
                lvl[x] = lvl[node] + 1;
                for (auto y : {1, 2, 3})
                    if (y != c)
                    {
                        clr[x] = y;
                        temp += dfs(x, node, y);
                        clr[x] = -1;
                    }
                ret *= temp;
            }
            else if (lvl[x] == (lvl[node] + 1))
            {
                ll temp = 0;
                for (auto y : {1, 2, 3})
                    if (y != c)
                    {
                        clr[x] = y;
                        temp += dfs(x, node, y);
                        clr[x] = -1;
                    }
                ret *= temp;
            }
            else if (clr[x] != -1)
            {
                if (clr[x] == c)
                    ret = 0;
            }
        }
        db(node, par, c, lvl[node], ret);
        return ret;
    };
    ll res = 1;
    for (size_t i = 0; i < N; i++)
    {
        db(i, vis[i], clr[i]);
        if (vis[i])
            continue;
        ll temp = 0;
        lvl[i] = 1;
        for (auto y : {1, 2, 3})
        {
            clr[i] = y;
            temp += dfs(i, i, y);
        }
        res = res * temp;
    }
    return res;
}

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main()
{
#ifndef LOCAL
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif
    constexpr char endl = '\n';
    int N, M;
    cin >> N >> M;
    vector<int> A(M), B(M);
    for (int i = 0; i < M; ++i)
    {
        cin >> A[i] >> B[i];
    }
    auto ans = solveCase(N, M, A, B);
    cout << ans << endl;
    return 0;
}